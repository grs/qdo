#!/usr/bin/env python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

from __future__ import print_function
import optparse, os
from proton import Message
from proton.handlers import MessagingHandler
from proton.reactor import Container

def default_identity():
    return '%s@%s' % (os.getpid(), os.getenv('HOSTNAME'))

class Recv(MessagingHandler):
    def __init__(self, address, identity, verbose):
        super(Recv, self).__init__()
        self.address = address
        self.identity = identity or default_identity()
        self.verbose = verbose

    def on_start(self, event):
        event.container.container_id = default_identity()
        conn = event.container.connect()
        event.container.create_receiver(conn, self.address)
        self.sender = event.container.create_sender(conn, None)

    def on_message(self, event):
        if self.verbose:
            print(event.message.body)
        if event.message.reply_to:
            msg = Message(address=event.message.reply_to)
            msg.subject = self.identity
            msg.body = event.message.body
            msg.correlation_id=event.message.correlation_id
            self.sender.send(msg)


parser = optparse.OptionParser(usage="usage: %prog [options]")
parser.add_option("-a", "--address", default="examples",
                  help="address from which messages are received (default %default)")
parser.add_option("-i", "--identity", default=None,
                  help="identity for this responder (default %default)")
parser.add_option("-v", "--verbose", action="store_true", dest="verbose",
                  help="verbose output")
opts, args = parser.parse_args()

try:
    Container(Recv(opts.address, opts.identity, opts.verbose)).run()
except KeyboardInterrupt: pass



